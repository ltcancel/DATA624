library(readxl)
library(tidyverse)
library(ggplot2)
library(patchwork)
library(fpp2)
library(caret)
library(RANN)
library(VIM)
#libraries
library(readxl)
library(tidyverse)
library(ggplot2)
library(patchwork)
library(fpp2)
library(caret)
library(RANN)
library(VIM)
df <- read_excel("data.xls")
head(df)
dim(df)
# Factoring category to get a count of the elements within dataset
df$category <- as.factor(df$category)
summary(df)
paste0(sum(is.na(df))," values missing from original set")
# Plots of missing values
aggr_plot <- VIM::aggr(df, col = c("navyblue", "orange"),
numbers = T, sortVars = T,
labels = names(df),
cex.axis = 0.7, gap = 3,
ylab = c("Frequency of Missing Data", "Pattern"))
# Shadow Matrix: correlation of missing values from the dataset
x <- as.data.frame(abs(is.na(df)))
y <- x[which(sapply(x, sd) >0)] # Extracts which variables are missing/NA from the dataset
cor(y) # Tendency of NA when correlated among variables
preProcess_NAdata_model <- preProcess(as.data.frame(df), method ="medianImpute")
df <- predict(preProcess_NAdata_model, newdata = df)
paste0(sum(is.na(df))," values missing after imputation")
summary(df)
# Converting Var02 to Datetime
df$SeriesInd <- as.integer(df$SeriesInd)
df$SeriesInd <- as.POSIXct(df$SeriesInd, origin = "1970-01-01")
# Renaming SeriesInd to Date to clarify purpose
df <- df %>% rename("Datetime" = SeriesInd)
summary(df)
# For forecasting later on
s01 <- df %>% filter(category == "S01")
s02 <- df %>% filter(category == "S02")
s03 <- df %>% filter(category == "S03")
s04 <- df %>% filter(category == "S04")
s05 <- df %>% filter(category == "S05")
s06 <- df %>% filter(category == "S06")
p1 <- ggplot(df, aes(category, Var01)) +
geom_boxplot()
p2 <- ggplot(df, aes(category, Var02)) +
geom_boxplot()
p3 <- ggplot(df, aes(category, Var03)) +
geom_boxplot()
p4 <- ggplot(df, aes(category, Var05)) +
geom_boxplot()
p5 <- ggplot(df, aes(category, Var07)) +
geom_boxplot()
p1+p2+p3+p4+p5+
plot_layout(ncol = 2)
p1 <- ggplot(df, aes(Var01, color=category)) +
geom_density()
p2 <- ggplot(df, aes(Var02, color=category)) +
geom_density()
p3 <- ggplot(df, aes(Var03, color=category)) +
geom_density()
p4 <- ggplot(df, aes(Var05, color=category)) +
geom_density()
p5 <- ggplot(df, aes(Var07, color=category)) +
geom_density()
p1+p2+p3+p4+p5+
plot_layout(ncol = 2)
library(moments)
skewness(df$Var01)
skewness(df$Var02)
skewness(df$Var03)
skewness(df$Var05)
skewness(df$Var07)
log_var01 <- log10(df$Var01)
sqrt_var01 <- sqrt(df$Var01)
cube_var01 <- df$Var01^(1/3)
hist(df$Var01)
hist(log_var01)
hist(sqrt_var01)
hist(cube_var01)
df_transformed <- df
df_transformed$Var01 <- log10(df$Var01)
df_transformed$Var02 <- log10(df$Var02)
df_transformed$Var03 <- log10(df$Var03)
df_transformed$Var05 <- log10(df$Var05)
df_transformed$Var07 <- log10(df$Var07)
p1 <- ggplot(df_transformed, aes(Var01, color=category)) +
geom_density()
p2 <- ggplot(df_transformed, aes(Var02, color=category)) +
geom_density()
p3 <- ggplot(df_transformed, aes(Var03, color=category)) +
geom_density()
p4 <- ggplot(df_transformed, aes(Var05, color=category)) +
geom_density()
p5 <- ggplot(df_transformed, aes(Var07, color=category)) +
geom_density()
p1+p2+p3+p4+p5+
plot_layout(ncol = 2)
s01 <- df_transformed %>% dplyr::filter(category == "S01")
s02 <- df_transformed %>% dplyr::filter(category == "S02")
s03 <- df_transformed %>% dplyr::filter(category == "S03")
s04 <- df_transformed %>% dplyr::filter(category == "S04")
s05 <- df_transformed %>% dplyr::filter(category == "S05")
s06 <- df_transformed %>% dplyr::filter(category == "S06")
s01
autoplot(s01[,"Var01"])
autoplot(s01["Datetime","Var01"])
autoplot(s01)
View(df)
df_test <- read_excel("data.xls")
head(df_test)
# Converting Var02 to Datetime
df_test$SeriesInd <- as.Date(df_test$SeriesInd)
# Converting Var02 to Datetime
df_test$SeriesInd <- as.Date(df_test$SeriesInd, origin = "2011-05-06")
df_test <- df_test %>% rename("Date" = SeriesInd)
summary(df_test)
?as.Date
df_test <- read_excel("data.xls")
#head(df_test)
# Converting Var02 to Datetime
df_test$SeriesInd <- as.Date(df_test$SeriesInd, origin = "1899-12-30")
# Renaming SeriesInd to Date to clarify purpose
df_test <- df_test %>% rename("Date" = SeriesInd)
summary(df_test)
#?as.Date
preProcess_NAdata_model <- preProcess(as.data.frame(df_test), method ="medianImpute")
df_test <- predict(preProcess_NAdata_model, newdata = df_test)
paste0(sum(is.na(df_test))," values missing after imputation")
s01_2 <- df %>% filter(category == "S01")
s02_2 <- df %>% filter(category == "S02")
s03_2 <- df %>% filter(category == "S03")
s04_2 <- df %>% filter(category == "S04")
s05_2 <- df %>% filter(category == "S05")
s06_2 <- df %>% filter(category == "S06")
head(df_test)
autoplot(s01_2)
autoplot(s01_2[,"Var01"])
?ts
s01_ts <- ts(s01_2[,"Var01"], frequency = 7, start = c(2011, 1))
autoplot(s01_ts)
s01_ts
head(s01_ts)
autoplot(s01_ts)
tail(df_test)
s01_ts <- ts(s01_2[,"Var01"], frequency = 7, start = c(2011, 5), end = (2018, 5))
s01_ts <- ts(s01_2[,"Var01"], frequency = 7, start = c(2011, 5), end = c(2018, 5))
autoplot(s01_ts)
s01_ts <- ts(s01_2[,"Var01"], frequency = 7, start = c(2011, 5), end = c(2018, 5))
s02_ts <- ts(s02_2[,"Var01"], frequency = 7, start = c(2011, 5), end = c(2018, 5))
s03_ts <- ts(s03_2[,"Var01"], frequency = 7, start = c(2011, 5), end = c(2018, 5))
s04_ts <- ts(s04_2[,"Var01"], frequency = 7, start = c(2011, 5), end = c(2018, 5))
s05_ts <- ts(s05_2[,"Var01"], frequency = 7, start = c(2011, 5), end = c(2018, 5))
s06_ts <- ts(s06_2[,"Var01"], frequency = 7, start = c(2011, 5), end = c(2018, 5))
autoplot(s01_ts)
autoplot(s01_ts) / ggseasonplot(s01_ts)
autoplot(s01_ts) / ggseasonplot(s01_ts) / ggsubseriesplot(s01_ts) / gglagplot(s01_ts) / ggAcf(s01_ts)
autoplot(s01_ts) / ggseasonplot(s01_ts) / ggsubseriesplot(s01_ts) / gglagplot(s01_ts) / ggAcf(s01_ts)
autoplot(s01_ts) / ggseasonplot(s01_ts) / ggsubseriesplot(s01_ts) / gglagplot(s01_ts) / ggAcf(s01_ts)
autoplot(s01_ts) / ggseasonplot(s01_ts) / ggsubseriesplot(s01_ts) / gglagplot(s01_ts) / ggAcf(s01_ts)
autoplot(s01_ts) / ggseasonplot(s01_ts) / ggsubseriesplot(s01_ts) / ggAcf(s01_ts)
autoplot(s01_ts) / ggseasonplot(s01_ts) / ggsubseriesplot(s01_ts) / ggAcf(s01_ts)
?as.POSIXct
df_test2 <- read_excel("data.xls")
# Converting Var02 to Datetime
df_test2$SeriesInd <- as.integer(df$SeriesInd)
df_test2 <- read_excel("data.xls")
# Converting Var02 to Datetime
df_test2$SeriesInd <- as.integer(d_test2f$SeriesInd)
df_test2 <- read_excel("data.xls")
# Converting Var02 to Datetime
df_test2$SeriesInd <- as.integer(d_test2$SeriesInd)
df_test2 <- read_excel("data.xls")
# Converting Var02 to Datetime
df_test2$SeriesInd <- as.integer(df_test2$SeriesInd)
df_test2$SeriesInd <- as.POSIXct(df_test2$SeriesInd, origin = "1960-01-01")
head(df_test2)
autoplot(s01_ts) / ggseasonplot(s01_ts) / ggsubseriesplot(s01_ts) / ggAcf(s01_ts) / gglagplot(s01_ts)
autoplot(s01_ts) / ggseasonplot(s01_ts) / ggsubseriesplot(s01_ts) / ggAcf(s01_ts)
gglagplot(s01_ts)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
?stl
fit <- stl(s01_ts, s.window = "periodic")
fit %>% seasadj() %>% naive()%>%
autoplot()
s01_ts
#STL using default values
fit <- stl(s01_ts, s.window = "periodic")
fit %>% seasadj() %>% naive()%>%
autoplot()
#libraries
library(readxl)
library(tidyverse)
library(ggplot2)
library(patchwork)
library(fpp2)
library(caret)
library(RANN)
library(VIM)
df <- read_excel("data.xls")
head(df)
dim(df)
# Factoring category to get a count of the elements within dataset
df$category <- as.factor(df$category)
summary(df)
paste0(sum(is.na(df))," values missing from original set")
# Plots of missing values
aggr_plot <- VIM::aggr(df, col = c("navyblue", "orange"),
numbers = T, sortVars = T,
labels = names(df),
cex.axis = 0.7, gap = 3,
ylab = c("Frequency of Missing Data", "Pattern"))
# Shadow Matrix: correlation of missing values from the dataset
x <- as.data.frame(abs(is.na(df)))
y <- x[which(sapply(x, sd) >0)] # Extracts which variables are missing/NA from the dataset
cor(y) # Tendency of NA when correlated among variables
preProcess_NAdata_model <- preProcess(as.data.frame(df), method ="medianImpute")
df <- predict(preProcess_NAdata_model, newdata = df)
paste0(sum(is.na(df))," values missing after imputation")
summary(df)
# Converting Var02 to Datetime
df$SeriesInd <- as.integer(df$SeriesInd)
df$SeriesInd <- as.POSIXct(df$SeriesInd, origin = "1970-01-01")
# Renaming SeriesInd to Date to clarify purpose
df <- df %>% rename("Datetime" = SeriesInd)
summary(df)
# For forecasting later on
s01 <- df %>% filter(category == "S01")
s02 <- df %>% filter(category == "S02")
s03 <- df %>% filter(category == "S03")
s04 <- df %>% filter(category == "S04")
s05 <- df %>% filter(category == "S05")
s06 <- df %>% filter(category == "S06")
p1 <- ggplot(df, aes(category, Var01)) +
geom_boxplot()
p2 <- ggplot(df, aes(category, Var02)) +
geom_boxplot()
p3 <- ggplot(df, aes(category, Var03)) +
geom_boxplot()
p4 <- ggplot(df, aes(category, Var05)) +
geom_boxplot()
p5 <- ggplot(df, aes(category, Var07)) +
geom_boxplot()
p1+p2+p3+p4+p5+
plot_layout(ncol = 2)
p1 <- ggplot(df, aes(Var01, color=category)) +
geom_density()
p2 <- ggplot(df, aes(Var02, color=category)) +
geom_density()
p3 <- ggplot(df, aes(Var03, color=category)) +
geom_density()
p4 <- ggplot(df, aes(Var05, color=category)) +
geom_density()
p5 <- ggplot(df, aes(Var07, color=category)) +
geom_density()
p1+p2+p3+p4+p5+
plot_layout(ncol = 2)
library(moments)
skewness(df$Var01)
skewness(df$Var02)
skewness(df$Var03)
skewness(df$Var05)
skewness(df$Var07)
log_var01 <- log10(df$Var01)
sqrt_var01 <- sqrt(df$Var01)
cube_var01 <- df$Var01^(1/3)
hist(df$Var01)
hist(log_var01)
hist(sqrt_var01)
hist(cube_var01)
df_transformed <- df
df_transformed$Var01 <- log10(df$Var01)
df_transformed$Var02 <- log10(df$Var02)
df_transformed$Var03 <- log10(df$Var03)
df_transformed$Var05 <- log10(df$Var05)
df_transformed$Var07 <- log10(df$Var07)
p1 <- ggplot(df_transformed, aes(Var01, color=category)) +
geom_density()
p2 <- ggplot(df_transformed, aes(Var02, color=category)) +
geom_density()
p3 <- ggplot(df_transformed, aes(Var03, color=category)) +
geom_density()
p4 <- ggplot(df_transformed, aes(Var05, color=category)) +
geom_density()
p5 <- ggplot(df_transformed, aes(Var07, color=category)) +
geom_density()
p1+p2+p3+p4+p5+
plot_layout(ncol = 2)
s01 <- df_transformed %>% dplyr::filter(category == "S01")
s02 <- df_transformed %>% dplyr::filter(category == "S02")
s03 <- df_transformed %>% dplyr::filter(category == "S03")
s04 <- df_transformed %>% dplyr::filter(category == "S04")
s05 <- df_transformed %>% dplyr::filter(category == "S05")
s06 <- df_transformed %>% dplyr::filter(category == "S06")
df_test <- read_excel("data.xls")
head(df_test)
tail(df_test)
# Converting Var02 to Datetime
df_test$SeriesInd <- as.Date(df_test$SeriesInd, origin = "1899-12-30")
# Renaming SeriesInd to Date to clarify purpose
df_test <- df_test %>% rename("Date" = SeriesInd)
summary(df_test)
#new imputation
preProcess_NAdata_model <- preProcess(as.data.frame(df_test), method ="medianImpute")
df_test <- predict(preProcess_NAdata_model, newdata = df_test)
paste0(sum(is.na(df_test))," values missing after imputation")
#new subsets with data conversion
s01_2 <- df %>% filter(category == "S01")
s02_2 <- df %>% filter(category == "S02")
s03_2 <- df %>% filter(category == "S03")
s04_2 <- df %>% filter(category == "S04")
s05_2 <- df %>% filter(category == "S05")
s06_2 <- df %>% filter(category == "S06")
s01_ts <- ts(s01_2[,"Var01"], frequency = 7, start = c(2011, 5), end = c(2018, 5))
s02_ts <- ts(s02_2[,"Var01"], frequency = 7, start = c(2011, 5), end = c(2018, 5))
s03_ts <- ts(s03_2[,"Var01"], frequency = 7, start = c(2011, 5), end = c(2018, 5))
s04_ts <- ts(s04_2[,"Var01"], frequency = 7, start = c(2011, 5), end = c(2018, 5))
s05_ts <- ts(s05_2[,"Var01"], frequency = 7, start = c(2011, 5), end = c(2018, 5))
s06_ts <- ts(s06_2[,"Var01"], frequency = 7, start = c(2011, 5), end = c(2018, 5))
autoplot(s01_ts) / ggseasonplot(s01_ts) / ggsubseriesplot(s01_ts) / ggAcf(s01_ts)
gglagplot(s01_ts)
library(a)
#libraries
library(readxl)
library(tidyverse)
library(ggplot2)
library(patchwork)
library(fpp2)
library(caret)
library(RANN)
library(VIM)
df <- read_excel("data.xls")
head(df)
dim(df)
# Factoring category to get a count of the elements within dataset
df$category <- as.factor(df$category)
summary(df)
paste0(sum(is.na(df))," values missing from original set")
# Plots of missing values
aggr_plot <- VIM::aggr(df, col = c("navyblue", "orange"),
numbers = T, sortVars = T,
labels = names(df),
cex.axis = 0.7, gap = 3,
ylab = c("Frequency of Missing Data", "Pattern"))
# Shadow Matrix: correlation of missing values from the dataset
x <- as.data.frame(abs(is.na(df)))
y <- x[which(sapply(x, sd) >0)] # Extracts which variables are missing/NA from the dataset
cor(y) # Tendency of NA when correlated among variables
preProcess_NAdata_model <- preProcess(as.data.frame(df), method ="medianImpute")
df <- predict(preProcess_NAdata_model, newdata = df)
paste0(sum(is.na(df))," values missing after imputation")
summary(df)
# Converting Var02 to Datetime
df$SeriesInd <- as.integer(df$SeriesInd)
df$SeriesInd <- as.POSIXct(df$SeriesInd, origin = "1970-01-01")
# Renaming SeriesInd to Date to clarify purpose
df <- df %>% rename("Datetime" = SeriesInd)
summary(df)
# For forecasting later on
s01 <- df %>% filter(category == "S01")
s02 <- df %>% filter(category == "S02")
s03 <- df %>% filter(category == "S03")
s04 <- df %>% filter(category == "S04")
s05 <- df %>% filter(category == "S05")
s06 <- df %>% filter(category == "S06")
p1 <- ggplot(df, aes(category, Var01)) +
geom_boxplot()
p2 <- ggplot(df, aes(category, Var02)) +
geom_boxplot()
p3 <- ggplot(df, aes(category, Var03)) +
geom_boxplot()
p4 <- ggplot(df, aes(category, Var05)) +
geom_boxplot()
p5 <- ggplot(df, aes(category, Var07)) +
geom_boxplot()
p1+p2+p3+p4+p5+
plot_layout(ncol = 2)
p1 <- ggplot(df, aes(Var01, color=category)) +
geom_density()
p2 <- ggplot(df, aes(Var02, color=category)) +
geom_density()
p3 <- ggplot(df, aes(Var03, color=category)) +
geom_density()
p4 <- ggplot(df, aes(Var05, color=category)) +
geom_density()
p5 <- ggplot(df, aes(Var07, color=category)) +
geom_density()
p1+p2+p3+p4+p5+
plot_layout(ncol = 2)
library(moments)
skewness(df$Var01)
skewness(df$Var02)
skewness(df$Var03)
skewness(df$Var05)
skewness(df$Var07)
log_var01 <- log10(df$Var01)
sqrt_var01 <- sqrt(df$Var01)
cube_var01 <- df$Var01^(1/3)
hist(df$Var01)
hist(log_var01)
hist(sqrt_var01)
hist(cube_var01)
df_transformed <- df
df_transformed$Var01 <- log10(df$Var01)
df_transformed$Var02 <- log10(df$Var02)
df_transformed$Var03 <- log10(df$Var03)
df_transformed$Var05 <- log10(df$Var05)
df_transformed$Var07 <- log10(df$Var07)
p1 <- ggplot(df_transformed, aes(Var01, color=category)) +
geom_density()
p2 <- ggplot(df_transformed, aes(Var02, color=category)) +
geom_density()
p3 <- ggplot(df_transformed, aes(Var03, color=category)) +
geom_density()
p4 <- ggplot(df_transformed, aes(Var05, color=category)) +
geom_density()
p5 <- ggplot(df_transformed, aes(Var07, color=category)) +
geom_density()
p1+p2+p3+p4+p5+
plot_layout(ncol = 2)
s01 <- df_transformed %>% dplyr::filter(category == "S01")
s02 <- df_transformed %>% dplyr::filter(category == "S02")
s03 <- df_transformed %>% dplyr::filter(category == "S03")
s04 <- df_transformed %>% dplyr::filter(category == "S04")
s05 <- df_transformed %>% dplyr::filter(category == "S05")
s06 <- df_transformed %>% dplyr::filter(category == "S06")
df_test <- read_excel("data.xls")
head(df_test)
tail(df_test)
# Converting Var02 to Datetime
df_test$SeriesInd <- as.Date(df_test$SeriesInd, origin = "1899-12-30")
# Renaming SeriesInd to Date to clarify purpose
df_test <- df_test %>% rename("Date" = SeriesInd)
summary(df_test)
#new imputation
preProcess_NAdata_model <- preProcess(as.data.frame(df_test), method ="medianImpute")
df_test <- predict(preProcess_NAdata_model, newdata = df_test)
paste0(sum(is.na(df_test))," values missing after imputation")
#new subsets with data conversion
s01_2 <- df %>% filter(category == "S01")
s02_2 <- df %>% filter(category == "S02")
s03_2 <- df %>% filter(category == "S03")
s04_2 <- df %>% filter(category == "S04")
s05_2 <- df %>% filter(category == "S05")
s06_2 <- df %>% filter(category == "S06")
s01_ts <- ts(s01_2[,"Var01"], frequency = 7, start = c(2011, 5), end = c(2018, 5))
s02_ts <- ts(s02_2[,"Var01"], frequency = 7, start = c(2011, 5), end = c(2018, 5))
s03_ts <- ts(s03_2[,"Var01"], frequency = 7, start = c(2011, 5), end = c(2018, 5))
s04_ts <- ts(s04_2[,"Var01"], frequency = 7, start = c(2011, 5), end = c(2018, 5))
s05_ts <- ts(s05_2[,"Var01"], frequency = 7, start = c(2011, 5), end = c(2018, 5))
s06_ts <- ts(s06_2[,"Var01"], frequency = 7, start = c(2011, 5), end = c(2018, 5))
autoplot(s01_ts) / ggseasonplot(s01_ts) / ggsubseriesplot(s01_ts) / ggAcf(s01_ts)
gglagplot(s01_ts)
#STL using default values
fit <- stl(s01_ts, s.window = "periodic")
fit %>% seasadj() %>% naive()%>%
autoplot()
#forecast
fit %>% forecast(method="naive") %>%
autoplot()
#STL using default values
fit <- stl(s01_ts, s.window = "periodic")
#forecast of seasonaly adjusted data
fit %>% seasadj() %>% naive()%>%
autoplot()
#forecast
fit %>% forecast(method="naive") %>%
autoplot()
#simple exponential smoothing since there is no clear trend of seasonal pattern for S01
?window
#simple exponential smoothing since there is no clear trend of seasonal pattern for S01
s01_data <- window(s01_2, start = 2011, end = 2018)
#simple exponential smoothing since there is no clear trend of seasonal pattern for S01
s01_data <- windowts(s01_2[,"Var01"], frequency = 7, start = c(2011, 5), end = c(2018, 5))
#simple exponential smoothing since there is no clear trend of seasonal pattern for S01
s01_data <- window(s01_2[,"Var01"], frequency = 7, start = c(2011, 5), end = c(2018, 5))
#simple exponential smoothing since there is no clear trend of seasonal pattern for S01
s01_data <- window(s01_2[,"Var01"], start = c(2011, 5), end = c(2018, 5))
#simple exponential smoothing since there is no clear trend of seasonal pattern for S01
?ses
#simple exponential smoothing since there is no clear trend of seasonal pattern for S01
fit <- ets(s01_ts)
summary(fit)
autoplot(fit)
#STL using default values
fit_stl <- stl(s01_ts, s.window = "periodic")
#forecast of seasonaly adjusted data
fit_stl %>% seasadj() %>% naive()%>%
autoplot()
#forecast from SLT + Random walk
fit_stl %>% forecast(method="naive") %>%
autoplot()
#simple exponential smoothing since there is no clear trend of seasonal pattern for S01
fit_ets <- ets(s01_ts)
summary(fit_ets)
autoplot(fit_ets)
autoplot(fit_ets)
#simple exponential smoothing since there is no clear trend of seasonal pattern for S01
fit_ets <- ets(s01_ts)
summary(fit_ets)
autoplot(fit_ets)
fit_ets %>% forecast(h=5) %>%
autoplot()
